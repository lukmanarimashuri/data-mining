{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Selamat Datang di Halaman Tugas Penambangan Data \u00b6 Nama : Lukman Ari Mashuri NIM : 180411100074 Kelas : Penambangan Data 5D Dosen Pengampu : Mula'ab, S. Si., M. Kom. Jurusan : Teknik Informatika","title":"Home"},{"location":"#selamat-datang-di-halaman-tugas-penambangan-data","text":"Nama : Lukman Ari Mashuri NIM : 180411100074 Kelas : Penambangan Data 5D Dosen Pengampu : Mula'ab, S. Si., M. Kom. Jurusan : Teknik Informatika","title":"Selamat Datang di Halaman Tugas Penambangan Data"},{"location":"decision_tree/","text":"Decision Tree \u00b6 Decision Tree \u00b6 Decisioin tree adalah alat pendukung keputusan yang menggunakan model keputusan seperti pohon. Decisioin tree (pohon keputusan) biasanya digunakan dalam riset operasi, khususnya dalam analisis keputusan, untuk membantu mengidentifikasi strategi yang paling memungkinkan untuk mencapai tujuan, dan juga merupakan alat yang populer dalam pembelajaran mesin. Dalam ilmu komputer, pembelajaran Decision tree sebagai model prediktif untuk melakukan pengamatan tentang item (diwakili di cabang-cabang) ke kesimpulan tentang nilai target item (diwakili dalam daun). Decision tree ini adalah salah satu pendekatan pemodelan prediktif yang digunakan dalam statistik, penambangan data, dan pembelajaran mesin. Dalam struktur decision tree, daun mewakili label kelas dan cabang mewakili konjungsi fitur yang mengarah ke label kelas tersebut. Decision tree ini di mana variabel target dapat mengambil nilai kontinu yang disebut pohon regresi. Entropy \u00b6 Entropi adalah nilai informasi yang menyatakan ukuran ketidakpastian(impurity) dari attribut dari suatu kumpulan obyek data dalam satuan bit. $$ Entropy(S)={\\sum \\limits_{i=1}^{n} -pi\\quad log_2\\quad pi} $$ Keterangan : S=Himpunan kasus n = jumlah partisi S pi= proposi Si terhadap S Gain \u00b6 Gain adalah ukuran efektifitas suatu atribut dalam mengklasifikasikan data, gain digunakan untuk menentukan urutan atribut dimana attribut yang memiliki nilai information Gain terbesar yang dipilih. $$ GAIN(S,A)= entropy(S)-{\\sum \\limits_{i=1}^{n} \\frac{|Si|}{|s|}*entropy(Si)} $$ Keterangan : S=himpunan kasus n=jumlah partisi S |si|=proporsi terhadap S |s|=jumlah kasus dalam S GINI Index \u00b6 Dalam penerapan GINI index untuk data berskala continuous , terdapat beberapa metode yang dapat digunakan untuk menentukan titik pemecah terbaik, yakni metode brute-force dan metode midpoints . Script \u00b6 # menentukan value atau jenis pada atribut def banyak_elemen ( kolom , data ): kelas = [] for i in range ( len ( data )): if data . values . tolist ()[ i ][ kolom ] not in kelas : kelas . append ( data . values . tolist ()[ i ][ kolom ]) return kelas kelas = banyak_elemen ( df . shape [ 1 ] - 1 , df ) outlook = banyak_elemen ( df . shape [ 1 ] - 5 , df ) temp = banyak_elemen ( df . shape [ 1 ] - 4 , df ) humidity = banyak_elemen ( df . shape [ 1 ] - 3 , df ) windy = banyak_elemen ( df . shape [ 1 ] - 2 , df ) print ( kelas , outlook , temp , humidity , windy ) ` [ 'no' , 'yes' ] [ 'sunny' , 'overcast' , 'rainy' ] [ 'hot' , 'mild' , 'cool' ] [ 'high' , 'normal' ] [ False , True ] # menentukan count value pada Kelas #Fungsi countvKelas untuk menghitung berapa perbandingan setiap elemen yang terdapat di class def countvKelas ( kelas , kolomKelas , data ): hasil = [] for x in range ( len ( kelas )): hasil . append ( 0 ) for i in range ( len ( data )): for j in range ( len ( kelas )): if data . values . tolist ()[ i ][ kolomKelas ] == kelas [ j ]: hasil [ j ] += 1 return hasil pKelas = countvKelas ( kelas , df . shape [ 1 ] - 1 , df ) pKelas [ 5 , 9 ] # menentukan nilai entropy target # Fungsi entropy untuk Menghitung nilai entropy pada sebuah fiture/class. fungsi e_list untuk mempermudah penghitungan entropy setiap elemen di dalam sebuah fiture def entropy ( T ): hasil = 0 jumlah = 0 for y in T : jumlah += y for z in range ( len ( T )): if jumlah != 0 : T [ z ] = T [ z ] / jumlah for i in T : if i != 0 : hasil -= i * math . log ( i , 2 ) return hasil def e_list ( atribut , n ): temp = [] tx = t_list ( atribut , n ) for i in range ( len ( atribut )): ent = entropy ( tx [ i ]) temp . append ( ent ) return temp tOutlook = t_list ( outlook , 5 ) tTemp = t_list ( temp , 4 ) tHum = t_list ( humidity , 3 ) tWin = t_list ( windy , 2 ) print ( \"Sunny, Overcast, Rainy\" , eOutlook ) print ( \"Hot, Mild, Cold\" , eTemp ) print ( \"High, Normal\" , eHum ) print ( \"False, True\" , eWin ) Sunny , Overcast , Rainy [ 0.9709505944546686 , 0.0 , 0.9709505944546686 ] Hot , Mild , Cold [ 1.0 , 0.9182958340544896 , 0.8112781244591328 ] High , Normal [ 0.9852281360342516 , 0.5916727785823275 ] False , True [ 0.8112781244591328 , 1.0 ] Berikut adalah contoh data yang akan dirubah menjadi decision tree: 0 1 2 3 4 0 CASTEMER ID GENDER CAR TIPE SHIRT SIZE CLASS 1 1 M FAMILY SMALL C0 2 2 M SPORT MEDIUM C0 3 3 M SPORT MEDIUM C0 4 4 M SPORT LARGE C0 5 5 M SPORT EXTRA LARGE C0 6 6 M SPORT EXTRA LARGE C0 7 7 F SPORT SMALL C0 8 8 F SPORT SMALL C0 9 9 F SPORT MEDIUM C1 10 10 F LUXURY LARGE C1 11 11 M FAMILY LARGE C1 12 12 M FAMILY EXTRA LARGE C1 13 13 M FAMILY MEDIUM C1 14 14 M LUCURY EXTRA LARGE C1 15 15 F LUCURY SMALL C1 16 16 F LUCURY SMALL C1 17 17 F LUCURY MEDIUM C1 18 18 F LUCURY MEDIUM C1 19 19 F LUCURY MEDIUM C1 20 20 F LUCURY LARGE C1 pertama mencari entropy(s) dari kolom class di atas, diket: co=10 = Pi=10/20 c1=10=Pi=10/20 $$ Entropy(S)={\\sum \\limits_{i=1}^{n} -pi\\quad log2\\quad pi} $$ $$ Entropy(S)= -10/20 * log2 10/20 -10/20 *log2 10/20 $$ $$ Entropy(S)= 1 $$ Kemudian menghitung gain setiap kolom di atas: $$ GAIN(GENDER)= entropy(S)-{\\sum \\limits_{i=1}^{n} \\frac{|Si|}{|s|}*entropy(Si)} $$ GAIN(GENDER)= 1-[10/20(6,4)+10/20(4,6)] \u200b = 1-10/20(-6/10 x log2 6/10 - 4/10 x log2 4/10) +10/20(-4/10 x log2 4/10 - 6/10 x log2 6/10 ) \u200b =1-(10/20 x 0,970951)+(10/20 x 0,970951) \u200b =1-(0,4485475+0,4485475) \u200b =1-0,970951 \u200b =0.029049 $$ GAIN(CAR\\quad TIPE)= entropy(S)-{\\sum \\limits_{i=1}^{n} \\frac{|Si|}{|s|}*entropy(Si)} $$ GAIN(CAR TIPE)= 1-[4/20(1,3)+8/20(8,0)+8/20(1,7)] \u200b = 1-4/20(-1/4 x log2 1/4 - 3/4 x log2 3/4) +8/20(-8/8 x log2 8/8 - 0/8 x log2 0/8 )+8/20(-1/8 x log2 1/8 - 7/8 x log2 7/8) \u200b =1-(0,162256+0+0,217426) \u200b =1-0,379681 \u200b =0,620319 GAIN(shirt hat)= 1-[5/20(3,2)+7/20(3,4)+4/20(2,2)+4/20(2,2)] \u200b = 1-5/20(-3/5 x log2 3/5 - 2/5 x log2 2/45 +7/20(-3/7 x log2 3/7 - 4/7 x log2 4/7 )+4/20(-2/4 x log2 2/4 - 2/2 x log2 2/2)+4/20(-2/4 log2 2/4-2/4 log2 2/4) \u200b =1-(0,242738+0,34483+0,2+0,2) \u200b =1-0,987567 \u200b =0,012433 Referensi \u00b6 https://en.wikipedia.org/wiki/Decision_tree_learning http://dinus.ac.id/repository/docs/ajar/5DecTreeClass.pdf","title":"Decision Tree"},{"location":"decision_tree/#decision-tree","text":"","title":"Decision Tree"},{"location":"decision_tree/#decision-tree_1","text":"Decisioin tree adalah alat pendukung keputusan yang menggunakan model keputusan seperti pohon. Decisioin tree (pohon keputusan) biasanya digunakan dalam riset operasi, khususnya dalam analisis keputusan, untuk membantu mengidentifikasi strategi yang paling memungkinkan untuk mencapai tujuan, dan juga merupakan alat yang populer dalam pembelajaran mesin. Dalam ilmu komputer, pembelajaran Decision tree sebagai model prediktif untuk melakukan pengamatan tentang item (diwakili di cabang-cabang) ke kesimpulan tentang nilai target item (diwakili dalam daun). Decision tree ini adalah salah satu pendekatan pemodelan prediktif yang digunakan dalam statistik, penambangan data, dan pembelajaran mesin. Dalam struktur decision tree, daun mewakili label kelas dan cabang mewakili konjungsi fitur yang mengarah ke label kelas tersebut. Decision tree ini di mana variabel target dapat mengambil nilai kontinu yang disebut pohon regresi.","title":"Decision Tree"},{"location":"decision_tree/#entropy","text":"Entropi adalah nilai informasi yang menyatakan ukuran ketidakpastian(impurity) dari attribut dari suatu kumpulan obyek data dalam satuan bit. $$ Entropy(S)={\\sum \\limits_{i=1}^{n} -pi\\quad log_2\\quad pi} $$ Keterangan : S=Himpunan kasus n = jumlah partisi S pi= proposi Si terhadap S","title":"Entropy"},{"location":"decision_tree/#gain","text":"Gain adalah ukuran efektifitas suatu atribut dalam mengklasifikasikan data, gain digunakan untuk menentukan urutan atribut dimana attribut yang memiliki nilai information Gain terbesar yang dipilih. $$ GAIN(S,A)= entropy(S)-{\\sum \\limits_{i=1}^{n} \\frac{|Si|}{|s|}*entropy(Si)} $$ Keterangan : S=himpunan kasus n=jumlah partisi S |si|=proporsi terhadap S |s|=jumlah kasus dalam S","title":"Gain"},{"location":"decision_tree/#gini-index","text":"Dalam penerapan GINI index untuk data berskala continuous , terdapat beberapa metode yang dapat digunakan untuk menentukan titik pemecah terbaik, yakni metode brute-force dan metode midpoints .","title":"GINI Index"},{"location":"decision_tree/#script","text":"# menentukan value atau jenis pada atribut def banyak_elemen ( kolom , data ): kelas = [] for i in range ( len ( data )): if data . values . tolist ()[ i ][ kolom ] not in kelas : kelas . append ( data . values . tolist ()[ i ][ kolom ]) return kelas kelas = banyak_elemen ( df . shape [ 1 ] - 1 , df ) outlook = banyak_elemen ( df . shape [ 1 ] - 5 , df ) temp = banyak_elemen ( df . shape [ 1 ] - 4 , df ) humidity = banyak_elemen ( df . shape [ 1 ] - 3 , df ) windy = banyak_elemen ( df . shape [ 1 ] - 2 , df ) print ( kelas , outlook , temp , humidity , windy ) ` [ 'no' , 'yes' ] [ 'sunny' , 'overcast' , 'rainy' ] [ 'hot' , 'mild' , 'cool' ] [ 'high' , 'normal' ] [ False , True ] # menentukan count value pada Kelas #Fungsi countvKelas untuk menghitung berapa perbandingan setiap elemen yang terdapat di class def countvKelas ( kelas , kolomKelas , data ): hasil = [] for x in range ( len ( kelas )): hasil . append ( 0 ) for i in range ( len ( data )): for j in range ( len ( kelas )): if data . values . tolist ()[ i ][ kolomKelas ] == kelas [ j ]: hasil [ j ] += 1 return hasil pKelas = countvKelas ( kelas , df . shape [ 1 ] - 1 , df ) pKelas [ 5 , 9 ] # menentukan nilai entropy target # Fungsi entropy untuk Menghitung nilai entropy pada sebuah fiture/class. fungsi e_list untuk mempermudah penghitungan entropy setiap elemen di dalam sebuah fiture def entropy ( T ): hasil = 0 jumlah = 0 for y in T : jumlah += y for z in range ( len ( T )): if jumlah != 0 : T [ z ] = T [ z ] / jumlah for i in T : if i != 0 : hasil -= i * math . log ( i , 2 ) return hasil def e_list ( atribut , n ): temp = [] tx = t_list ( atribut , n ) for i in range ( len ( atribut )): ent = entropy ( tx [ i ]) temp . append ( ent ) return temp tOutlook = t_list ( outlook , 5 ) tTemp = t_list ( temp , 4 ) tHum = t_list ( humidity , 3 ) tWin = t_list ( windy , 2 ) print ( \"Sunny, Overcast, Rainy\" , eOutlook ) print ( \"Hot, Mild, Cold\" , eTemp ) print ( \"High, Normal\" , eHum ) print ( \"False, True\" , eWin ) Sunny , Overcast , Rainy [ 0.9709505944546686 , 0.0 , 0.9709505944546686 ] Hot , Mild , Cold [ 1.0 , 0.9182958340544896 , 0.8112781244591328 ] High , Normal [ 0.9852281360342516 , 0.5916727785823275 ] False , True [ 0.8112781244591328 , 1.0 ] Berikut adalah contoh data yang akan dirubah menjadi decision tree: 0 1 2 3 4 0 CASTEMER ID GENDER CAR TIPE SHIRT SIZE CLASS 1 1 M FAMILY SMALL C0 2 2 M SPORT MEDIUM C0 3 3 M SPORT MEDIUM C0 4 4 M SPORT LARGE C0 5 5 M SPORT EXTRA LARGE C0 6 6 M SPORT EXTRA LARGE C0 7 7 F SPORT SMALL C0 8 8 F SPORT SMALL C0 9 9 F SPORT MEDIUM C1 10 10 F LUXURY LARGE C1 11 11 M FAMILY LARGE C1 12 12 M FAMILY EXTRA LARGE C1 13 13 M FAMILY MEDIUM C1 14 14 M LUCURY EXTRA LARGE C1 15 15 F LUCURY SMALL C1 16 16 F LUCURY SMALL C1 17 17 F LUCURY MEDIUM C1 18 18 F LUCURY MEDIUM C1 19 19 F LUCURY MEDIUM C1 20 20 F LUCURY LARGE C1 pertama mencari entropy(s) dari kolom class di atas, diket: co=10 = Pi=10/20 c1=10=Pi=10/20 $$ Entropy(S)={\\sum \\limits_{i=1}^{n} -pi\\quad log2\\quad pi} $$ $$ Entropy(S)= -10/20 * log2 10/20 -10/20 *log2 10/20 $$ $$ Entropy(S)= 1 $$ Kemudian menghitung gain setiap kolom di atas: $$ GAIN(GENDER)= entropy(S)-{\\sum \\limits_{i=1}^{n} \\frac{|Si|}{|s|}*entropy(Si)} $$ GAIN(GENDER)= 1-[10/20(6,4)+10/20(4,6)] \u200b = 1-10/20(-6/10 x log2 6/10 - 4/10 x log2 4/10) +10/20(-4/10 x log2 4/10 - 6/10 x log2 6/10 ) \u200b =1-(10/20 x 0,970951)+(10/20 x 0,970951) \u200b =1-(0,4485475+0,4485475) \u200b =1-0,970951 \u200b =0.029049 $$ GAIN(CAR\\quad TIPE)= entropy(S)-{\\sum \\limits_{i=1}^{n} \\frac{|Si|}{|s|}*entropy(Si)} $$ GAIN(CAR TIPE)= 1-[4/20(1,3)+8/20(8,0)+8/20(1,7)] \u200b = 1-4/20(-1/4 x log2 1/4 - 3/4 x log2 3/4) +8/20(-8/8 x log2 8/8 - 0/8 x log2 0/8 )+8/20(-1/8 x log2 1/8 - 7/8 x log2 7/8) \u200b =1-(0,162256+0+0,217426) \u200b =1-0,379681 \u200b =0,620319 GAIN(shirt hat)= 1-[5/20(3,2)+7/20(3,4)+4/20(2,2)+4/20(2,2)] \u200b = 1-5/20(-3/5 x log2 3/5 - 2/5 x log2 2/45 +7/20(-3/7 x log2 3/7 - 4/7 x log2 4/7 )+4/20(-2/4 x log2 2/4 - 2/2 x log2 2/2)+4/20(-2/4 log2 2/4-2/4 log2 2/4) \u200b =1-(0,242738+0,34483+0,2+0,2) \u200b =1-0,987567 \u200b =0,012433","title":"Script"},{"location":"decision_tree/#referensi","text":"https://en.wikipedia.org/wiki/Decision_tree_learning http://dinus.ac.id/repository/docs/ajar/5DecTreeClass.pdf","title":"Referensi"},{"location":"deskriptif/","text":"Statistik Deskriptif \u00b6 Pengertian \u00b6 Statistik deskriptif adalah metode-metode pengumpulan dan penyajian data agar dapat memberikan suatu informasi yang berguna Statistik deskriptif hanya memberikan informasi mengenai data yang telah dimiliki dan menyajikan data dalam bentuk tabel diagram grafik atau dalam bentuk lainnya dalam uraian-uraian yang singkat dan terbatas. Tipe Statistik Deskriptif \u00b6 Mean (Rata-rata) \u00b6 Mean adalah rata-rata dari kumpulan angka, secara khusus, jumlah nilai dibagi dengan banyaknya angka. misal ada sebuah data, maka untuk mencari mean dapat dihitung dengan rumus berikut ini: $$ \\bar x ={\\sum \\limits_{i=1}^{n} x_i \\over N} = {x_1 + x_2 + x_3 + ... + x_n \\over N} $$ Keterangan: * x bar = x rata-rata * x = data ke n * n = banyaknya data Median \u00b6 Median adalah nilai pemisah bagian tengah dari urutan sebuah data. Median disimbolkan dengan Me . nilali _Quartile__2__ berbeda cara perhitungannya, yakni tergantung banyak data tersebut ganjil atau genap. berikut adalah rumus untuk menghitung median: $$ Me=Q_2 =\\left( \\begin{matrix} n+1 \\over 2 \\end{matrix} \\right), jika\\quad n\\quad ganjil $$ $$ Me=Q_2 =\\left( \\begin{matrix} {xn \\over 2 } {xn+1\\over 2} \\over 2 \\end{matrix} \\right), jika\\quad n\\quad genap $$ Keterangan: Me = Median dari kelompok data n = banyak data Modus \u00b6 Modus adalah suatu nilai yang paling sering muncul dalam suatu data. Modus berguna untuk mengetahui tingkat frekuensi terjadinya suatu peristiwa. jika dalam suatu data ada dua nilai dengan frekuensi tertinggi, maka itu disebut bimodal, jika ada tiga disebut trimodal, dan jika ada banyak nilai dengan frekuensi tertinggi maka disebut multimodal. berikut adalah rumus untuk mencari modus dalam sebuah himpunan angka: $$ M_o = Tb + p{b_1 \\over b_1 + b_2} $$ Keterangan: Mo = Modus Tb = tepi bawah b1 = selisih frekuensi antara elemen modus dengan elemet sebelumnya b2 = selisih frekuensi antara elemen modus dengan elemen sesudahnya p = panjang interval nilai b1 dan b2 adalah mutlak (selalu positif) Varians \u00b6 varians adalah ukuran seberapa jauh suatu kumpulan bilangan tersebar, varian merupakan jumlah kuadrat semua deviasi nilai-nilai terhadap rata-rata. berikut adalah rumus untuk mencari nilai varian dari suatu himpunan data: $$ \\sigma^2 = {\\sum \\limits_{i=1}^{n} (x_i - \\bar x)^2 \\over n} $$ Keterangan: x = rata-rata Xi = rata-rata dari semua titik data n = banyak data Standar Deviasi \u00b6 Standar deviasi adalah nilai yang digunakan untuk menentukan sebaran data dalam sampel, serta seberapa dekat titik data individu ke rata-rata nilai sampel. Standar deviasi dapat dengan mudah dihitung dengan hanya mengakar kuadratkan nilai varians. Jika titik data lebih rendah dari rata-rata maka semakin tinggi standar deviasinya. Untuk menghitung standar deviasi dapat menggunakan rumus berikut: $$ \\sigma^ = \\sqrt {{\\sum \\limits_{i=1}^{n} (x_i - \\bar x)^2 \\over n}} $$ Skewness \u00b6 Skewness ( kemiringan ) mengacu pada distorsi atau asimetri dalam kurva lonceng simetris, atau distribusi normal dalam suatu set data. Skewness merupakan bentuk ketidaksimetrisan suatu distribusi data. Skewness juga adaalah angka yang menujukkan ketidak miringan atau kemiringan suatu data. berikut adalah rumus untuk mencari skewness: $$ Skewness = {\\sum \\limits{i=1}^n (x_i - \\bar x)^i \\over (n- 1) \\sigma^3} $$ Keterangan: Xi = titik data\\ x = rata-rata n = jumlah titik distribusi o = standar deviasi Quartile \u00b6 Quartile adalah jenis Quantile. Quartile pertama (Q1) didefinisikan sebagai angka tengah antara angka terkecil dan median dari kumpulan data. Kuartil kedua (Q2) adalah median data. Kuartil ketiga (Q3) adalah nilai tengah antara median dan nilai tertinggi dari kumpulan data. Simpelnya, quantile ialah nilai yang dibagi 25%. berikut adalah rumus quantile: $$ Q_1 = (n + 1) {1\\over 4} $$ $$ Q_2= (n + 1) {1\\over 2} $$ $$ Q_3 = (n + 1) {3\\over 4} $$ Keterangan: Q = nialai quarter n = banyak data Penerapan Statistik Deskrtiptif dalam Python \u00b6 Alat dan Bahan: \u00b6 buatlah data dengan random di excel terleih dahulu, caranya dengan menggunakan formula =RANDBETWEEN(batas_bawah;batas_atas) . kemudian copast hasil tersebut sebagai values . Setelah itu save as .csv . kita menggunakan library python yakni, pandas dan scipy. Langkah-langkah: \u00b6 Pertama \u00b6 Mengimport library yang telah disiapkan tadi, yakni scipy dan pandas import pandas as pd from scipy import stats Kedua \u00b6 Memuat data .csv yang telah dibuat df = pd . read_csv ( 'data_random.csv' , sep = ';' ) Ketiga \u00b6 Memuat penyimpanan data untuk disimpan kemudian untuk ditampilkan. Kemudian menghitung data yang diambil dari bebrapa kolom dari data file .csv dengan itersi, dan menghitung dengan cara yang telah disediakan di libary pandas. Kemudian visualisasikan data trsebut. data = { \"Stats\" : [ 'Min' , 'Max' , 'Mean' , 'Standard Deviasi' , 'Variasi' , 'Skewnes' , 'Quartile 1' , 'Quartile 2' , 'Quartile 3' , 'Median' , 'Modus' ]} for i in df . columns : data [ i ] = [ df [ i ] . min (), df [ i ] . max (), df [ i ] . mean (), round ( df [ i ] . std (), 2 ), round ( df [ i ] . var (), 2 ), round ( df [ i ] . skew (), 2 ), df [ i ] . quantile ( 0.25 ), df [ i ] . quantile ( 0.5 ), df [ i ] . quantile ( 0.75 ), df [ i ] . median (), stats . mode ( df [ i ]) . mode [ 0 ]] tes = pd . DataFrame ( data , columns = [ 'Stats' ] + [ x for x in df . columns ]) tes stats Tinggi Badan Berat Badan Usia Lingkar Badan Min 140 40 20 70 Max 190 70 50 100 Mean 164.882 54.72 34.832 85.228 Standard Deviasi 15.18 8.96 9.3 8.8 Variasi 230.35 80.27 86.4 77.42 Skewnes -0 0.1 0.08 -0.07 Quantile 1 151 47 27 78 Quantile 2 165 54 34 85 Quantile 3 179 63 43.25 93 Median 165 54 34 85 Modus 142 50 28 93 Referensi \u00b6 https://id.wikipedia.org/wiki/Statistika_deskriptif https://www.investopedia.com/terms/s/skewness.asp https://rumusrumus.com/standar-deviasi/ https://statmat.id/pengertian-statistik-deskriptif-dan-statistik-inferensia/ https://www.asikbelajar.com/pengertian-modus-mode/ https://en.wikipedia.org/wiki/Median https://en.wikipedia.org/wiki/Mean","title":"Statistik Deskriptif"},{"location":"deskriptif/#statistik-deskriptif","text":"","title":"Statistik Deskriptif"},{"location":"deskriptif/#pengertian","text":"Statistik deskriptif adalah metode-metode pengumpulan dan penyajian data agar dapat memberikan suatu informasi yang berguna Statistik deskriptif hanya memberikan informasi mengenai data yang telah dimiliki dan menyajikan data dalam bentuk tabel diagram grafik atau dalam bentuk lainnya dalam uraian-uraian yang singkat dan terbatas.","title":"Pengertian"},{"location":"deskriptif/#tipe-statistik-deskriptif","text":"","title":"Tipe Statistik Deskriptif"},{"location":"deskriptif/#mean-rata-rata","text":"Mean adalah rata-rata dari kumpulan angka, secara khusus, jumlah nilai dibagi dengan banyaknya angka. misal ada sebuah data, maka untuk mencari mean dapat dihitung dengan rumus berikut ini: $$ \\bar x ={\\sum \\limits_{i=1}^{n} x_i \\over N} = {x_1 + x_2 + x_3 + ... + x_n \\over N} $$ Keterangan: * x bar = x rata-rata * x = data ke n * n = banyaknya data","title":"Mean (Rata-rata)"},{"location":"deskriptif/#median","text":"Median adalah nilai pemisah bagian tengah dari urutan sebuah data. Median disimbolkan dengan Me . nilali _Quartile__2__ berbeda cara perhitungannya, yakni tergantung banyak data tersebut ganjil atau genap. berikut adalah rumus untuk menghitung median: $$ Me=Q_2 =\\left( \\begin{matrix} n+1 \\over 2 \\end{matrix} \\right), jika\\quad n\\quad ganjil $$ $$ Me=Q_2 =\\left( \\begin{matrix} {xn \\over 2 } {xn+1\\over 2} \\over 2 \\end{matrix} \\right), jika\\quad n\\quad genap $$ Keterangan: Me = Median dari kelompok data n = banyak data","title":"Median"},{"location":"deskriptif/#modus","text":"Modus adalah suatu nilai yang paling sering muncul dalam suatu data. Modus berguna untuk mengetahui tingkat frekuensi terjadinya suatu peristiwa. jika dalam suatu data ada dua nilai dengan frekuensi tertinggi, maka itu disebut bimodal, jika ada tiga disebut trimodal, dan jika ada banyak nilai dengan frekuensi tertinggi maka disebut multimodal. berikut adalah rumus untuk mencari modus dalam sebuah himpunan angka: $$ M_o = Tb + p{b_1 \\over b_1 + b_2} $$ Keterangan: Mo = Modus Tb = tepi bawah b1 = selisih frekuensi antara elemen modus dengan elemet sebelumnya b2 = selisih frekuensi antara elemen modus dengan elemen sesudahnya p = panjang interval nilai b1 dan b2 adalah mutlak (selalu positif)","title":"Modus"},{"location":"deskriptif/#varians","text":"varians adalah ukuran seberapa jauh suatu kumpulan bilangan tersebar, varian merupakan jumlah kuadrat semua deviasi nilai-nilai terhadap rata-rata. berikut adalah rumus untuk mencari nilai varian dari suatu himpunan data: $$ \\sigma^2 = {\\sum \\limits_{i=1}^{n} (x_i - \\bar x)^2 \\over n} $$ Keterangan: x = rata-rata Xi = rata-rata dari semua titik data n = banyak data","title":"Varians"},{"location":"deskriptif/#standar-deviasi","text":"Standar deviasi adalah nilai yang digunakan untuk menentukan sebaran data dalam sampel, serta seberapa dekat titik data individu ke rata-rata nilai sampel. Standar deviasi dapat dengan mudah dihitung dengan hanya mengakar kuadratkan nilai varians. Jika titik data lebih rendah dari rata-rata maka semakin tinggi standar deviasinya. Untuk menghitung standar deviasi dapat menggunakan rumus berikut: $$ \\sigma^ = \\sqrt {{\\sum \\limits_{i=1}^{n} (x_i - \\bar x)^2 \\over n}} $$","title":"Standar Deviasi"},{"location":"deskriptif/#skewness","text":"Skewness ( kemiringan ) mengacu pada distorsi atau asimetri dalam kurva lonceng simetris, atau distribusi normal dalam suatu set data. Skewness merupakan bentuk ketidaksimetrisan suatu distribusi data. Skewness juga adaalah angka yang menujukkan ketidak miringan atau kemiringan suatu data. berikut adalah rumus untuk mencari skewness: $$ Skewness = {\\sum \\limits{i=1}^n (x_i - \\bar x)^i \\over (n- 1) \\sigma^3} $$ Keterangan: Xi = titik data\\ x = rata-rata n = jumlah titik distribusi o = standar deviasi","title":"Skewness"},{"location":"deskriptif/#quartile","text":"Quartile adalah jenis Quantile. Quartile pertama (Q1) didefinisikan sebagai angka tengah antara angka terkecil dan median dari kumpulan data. Kuartil kedua (Q2) adalah median data. Kuartil ketiga (Q3) adalah nilai tengah antara median dan nilai tertinggi dari kumpulan data. Simpelnya, quantile ialah nilai yang dibagi 25%. berikut adalah rumus quantile: $$ Q_1 = (n + 1) {1\\over 4} $$ $$ Q_2= (n + 1) {1\\over 2} $$ $$ Q_3 = (n + 1) {3\\over 4} $$ Keterangan: Q = nialai quarter n = banyak data","title":"Quartile"},{"location":"deskriptif/#penerapan-statistik-deskrtiptif-dalam-python","text":"","title":"Penerapan Statistik Deskrtiptif dalam Python"},{"location":"deskriptif/#alat-dan-bahan","text":"buatlah data dengan random di excel terleih dahulu, caranya dengan menggunakan formula =RANDBETWEEN(batas_bawah;batas_atas) . kemudian copast hasil tersebut sebagai values . Setelah itu save as .csv . kita menggunakan library python yakni, pandas dan scipy.","title":"Alat dan Bahan:"},{"location":"deskriptif/#langkah-langkah","text":"","title":"Langkah-langkah:"},{"location":"deskriptif/#pertama","text":"Mengimport library yang telah disiapkan tadi, yakni scipy dan pandas import pandas as pd from scipy import stats","title":"Pertama"},{"location":"deskriptif/#kedua","text":"Memuat data .csv yang telah dibuat df = pd . read_csv ( 'data_random.csv' , sep = ';' )","title":"Kedua"},{"location":"deskriptif/#ketiga","text":"Memuat penyimpanan data untuk disimpan kemudian untuk ditampilkan. Kemudian menghitung data yang diambil dari bebrapa kolom dari data file .csv dengan itersi, dan menghitung dengan cara yang telah disediakan di libary pandas. Kemudian visualisasikan data trsebut. data = { \"Stats\" : [ 'Min' , 'Max' , 'Mean' , 'Standard Deviasi' , 'Variasi' , 'Skewnes' , 'Quartile 1' , 'Quartile 2' , 'Quartile 3' , 'Median' , 'Modus' ]} for i in df . columns : data [ i ] = [ df [ i ] . min (), df [ i ] . max (), df [ i ] . mean (), round ( df [ i ] . std (), 2 ), round ( df [ i ] . var (), 2 ), round ( df [ i ] . skew (), 2 ), df [ i ] . quantile ( 0.25 ), df [ i ] . quantile ( 0.5 ), df [ i ] . quantile ( 0.75 ), df [ i ] . median (), stats . mode ( df [ i ]) . mode [ 0 ]] tes = pd . DataFrame ( data , columns = [ 'Stats' ] + [ x for x in df . columns ]) tes stats Tinggi Badan Berat Badan Usia Lingkar Badan Min 140 40 20 70 Max 190 70 50 100 Mean 164.882 54.72 34.832 85.228 Standard Deviasi 15.18 8.96 9.3 8.8 Variasi 230.35 80.27 86.4 77.42 Skewnes -0 0.1 0.08 -0.07 Quantile 1 151 47 27 78 Quantile 2 165 54 34 85 Quantile 3 179 63 43.25 93 Median 165 54 34 85 Modus 142 50 28 93","title":"Ketiga"},{"location":"deskriptif/#referensi","text":"https://id.wikipedia.org/wiki/Statistika_deskriptif https://www.investopedia.com/terms/s/skewness.asp https://rumusrumus.com/standar-deviasi/ https://statmat.id/pengertian-statistik-deskriptif-dan-statistik-inferensia/ https://www.asikbelajar.com/pengertian-modus-mode/ https://en.wikipedia.org/wiki/Median https://en.wikipedia.org/wiki/Mean","title":"Referensi"},{"location":"missingvalue_knn/","text":"Missing Values dengan teknik K-NN \u00b6 Missing Value \u00b6 Missing value (data/nilai yang hilang) adalah suatu informasi yang tidak tersedia dalam suatu data. Missing value biasanya terjadi karena adanya suatu informasi dalam data tidak diberikan, sulit dicari, atau memang informasi tersebut tidak ada. Beberapa metode yang biasa digunakan untuk mencari data yang hilang tersebut, biasanya data diganti nilainya dengan nilai tengah atau dengan menyimpulkan dari nilai yang ada, dan atau munglin bahkan mengabaikan data yang hilang tersebut. Algoritma K-NN (K-Nearest Neighbors) \u00b6 K-NN adalah sebuah metode dimana metode ini melakukan klarifikasi berdasarkan data yang jaraknya paling dekat dengan data yang dicari. Mengatasi Missing Value dengan Metode K-NN pada Bahasa Pemrograman Python \u00b6 Untuk mempermudah dalam proses penyelesaiannya, dapat digunakan yakni library python, yakni pandas dan scipy. # importing pandas as pd import pandas as pd # importing numpy as np import numpy as np # dictionary of lists dict = { 'First Score' :[ 100 , 80 , np . nan , 65 ], 'Second Score' : [ 80 , 55 , 76 , np . nan ], 'Third Score' :[ np . nan , 60 , 90 , 87 ]} # creating a dataframe from dictionary df = pd . DataFrame ( dict ) # filling missing value using fillna() df . fillna ( 0 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } First Score Second Score Third Score 0 100.0 80.0 0.0 1 80.0 55.0 60.0 2 0.0 76.0 90.0 3 65.0 0.0 87.0 Referensi \u00b6 https://www.dictio.id/t/apa-yang-dimaksud-dengan-data-hilang-atau-missing-data-pada-statistik/116500 https://openlibrary.telkomuniversity.ac.id/pustaka/files/114813/jurnal_eproc/imputasi-misssing-data-menggunakan-metode-k-nearest-neighbour-dengan-optimasi-algoritma-memetikamissing-value-imputation-using-k-nearest-neighbour-method-optimized-with-memetic-algorithm.pdf","title":"Missing Value with K Nearest Nei"},{"location":"missingvalue_knn/#missing-values-dengan-teknik-k-nn","text":"","title":"Missing Values dengan teknik K-NN"},{"location":"missingvalue_knn/#missing-value","text":"Missing value (data/nilai yang hilang) adalah suatu informasi yang tidak tersedia dalam suatu data. Missing value biasanya terjadi karena adanya suatu informasi dalam data tidak diberikan, sulit dicari, atau memang informasi tersebut tidak ada. Beberapa metode yang biasa digunakan untuk mencari data yang hilang tersebut, biasanya data diganti nilainya dengan nilai tengah atau dengan menyimpulkan dari nilai yang ada, dan atau munglin bahkan mengabaikan data yang hilang tersebut.","title":"Missing Value"},{"location":"missingvalue_knn/#algoritma-k-nn-k-nearest-neighbors","text":"K-NN adalah sebuah metode dimana metode ini melakukan klarifikasi berdasarkan data yang jaraknya paling dekat dengan data yang dicari.","title":"Algoritma K-NN (K-Nearest Neighbors)"},{"location":"missingvalue_knn/#mengatasi-missing-value-dengan-metode-k-nn-pada-bahasa-pemrograman-python","text":"Untuk mempermudah dalam proses penyelesaiannya, dapat digunakan yakni library python, yakni pandas dan scipy. # importing pandas as pd import pandas as pd # importing numpy as np import numpy as np # dictionary of lists dict = { 'First Score' :[ 100 , 80 , np . nan , 65 ], 'Second Score' : [ 80 , 55 , 76 , np . nan ], 'Third Score' :[ np . nan , 60 , 90 , 87 ]} # creating a dataframe from dictionary df = pd . DataFrame ( dict ) # filling missing value using fillna() df . fillna ( 0 ) .dataframe tbody tr th:only-of-type { vertical-align: middle; } .dataframe tbody tr th { vertical-align: top; } .dataframe thead th { text-align: right; } First Score Second Score Third Score 0 100.0 80.0 0.0 1 80.0 55.0 60.0 2 0.0 76.0 90.0 3 65.0 0.0 87.0","title":"Mengatasi Missing Value dengan Metode K-NN pada Bahasa Pemrograman Python"},{"location":"missingvalue_knn/#referensi","text":"https://www.dictio.id/t/apa-yang-dimaksud-dengan-data-hilang-atau-missing-data-pada-statistik/116500 https://openlibrary.telkomuniversity.ac.id/pustaka/files/114813/jurnal_eproc/imputasi-misssing-data-menggunakan-metode-k-nearest-neighbour-dengan-optimasi-algoritma-memetikamissing-value-imputation-using-k-nearest-neighbour-method-optimized-with-memetic-algorithm.pdf","title":"Referensi"}]}